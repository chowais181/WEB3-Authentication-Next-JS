import { RequiredParam } from "../../types";
import type { SmartContract, ValidContractInstance } from "@thirdweb-dev/sdk";
/**
 * TODO write docs
 * @param contract -
 * @returns
 * @beta
 */
export declare function usePrimarySaleRecipient(contract: RequiredParam<SmartContract | ValidContractInstance>): import("react-query").UseQueryResult<string, unknown>;
/**
 * TODO write docs
 * @param contract -
 * @returns
 * @beta
 */
export declare function useUpdatePrimarySaleRecipient(contract: RequiredParam<SmartContract | ValidContractInstance>): import("react-query").UseMutationResult<Omit<{
    receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
    data: () => Promise<unknown>;
}, "data">, unknown, string, unknown>;
/**
 * TODO write docs
 * @param contract -
 * @returns
 * @beta
 */
export declare function useRoyaltySettings(contract: RequiredParam<SmartContract | ValidContractInstance>): import("react-query").UseQueryResult<{
    seller_fee_basis_points: number;
    fee_recipient: string;
}, unknown>;
/**
 * TODO write docs
 * @param contract -
 * @returns
 * @beta
 */
export declare function useUpdateRoyaltySettings(contract: RequiredParam<SmartContract | ValidContractInstance>): import("react-query").UseMutationResult<{
    receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
    data: () => Promise<{
        seller_fee_basis_points: number;
        fee_recipient: string;
    }>;
}, unknown, {
    seller_fee_basis_points?: number | undefined;
    fee_recipient?: string | undefined;
}, unknown>;
/**
 * TODO write docs
 * @param contract -
 * @returns
 * @beta
 */
export declare function usePlatformFees(contract: RequiredParam<SmartContract | ValidContractInstance>): import("react-query").UseQueryResult<{
    platform_fee_basis_points: number;
    platform_fee_recipient: string;
}, unknown>;
/**
 * TODO write docs
 * @param contract -
 * @returns
 * @beta
 */
export declare function useUpdatePlatformFees(contract: RequiredParam<SmartContract | ValidContractInstance>): import("react-query").UseMutationResult<Omit<{
    receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
    data: () => Promise<unknown>;
}, "data">, unknown, {
    platform_fee_basis_points?: number | undefined;
    fee_recipient?: string | undefined;
}, unknown>;
/**
 * TODO write docs
 * @param contract -
 * @returns
 * @beta
 */
export declare function useMetadata(contract: RequiredParam<SmartContract | ValidContractInstance>): import("react-query").UseQueryResult<{
    [x: string]: import("@thirdweb-dev/sdk").Json;
    description?: string | undefined;
    image?: any;
    external_link?: string | undefined;
    name: string;
}, unknown>;
/**
 * TODO write docs
 * @param contract -
 * @returns
 * @beta
 */
export declare function useUpdateMetadata(contract: RequiredParam<SmartContract | ValidContractInstance>): import("react-query").UseMutationResult<{
    receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
    data: () => Promise<any>;
}, unknown, {
    [x: string]: import("@thirdweb-dev/sdk").Json;
    description?: string | undefined;
    image?: any;
    external_link?: string | undefined;
    name: string;
}, unknown>;
